package cvc;

public enum Kind
{
  INTERNAL_KIND(-2),
  UNDEFINED_KIND(-1),
  NULL(0),
  UNINTERPRETED_CONSTANT(1),
  ABSTRACT_VALUE(2),
  EQUAL(3),
  DISTINCT(4),
  VARIABLE(5),
  BOUND_VARIABLE(6),
  SEXPR(7),
  LAMBDA(8),
  WITNESS(9),
  CONST_BOOLEAN(10),
  NOT(11),
  AND(12),
  IMPLIES(13),
  OR(14),
  XOR(15),
  ITE(16),
  APPLY_UF(17),
  CARDINALITY_CONSTRAINT(18),
  CARDINALITY_VALUE(19),
  HO_APPLY(20),
  PLUS(21),
  MULT(22),
  IAND(23),
  MINUS(24),
  UMINUS(25),
  DIVISION(26),
  INTS_DIVISION(27),
  INTS_MODULUS(28),
  ABS(29),
  POW(30),
  EXPONENTIAL(31),
  SINE(32),
  COSINE(33),
  TANGENT(34),
  COSECANT(35),
  SECANT(36),
  COTANGENT(37),
  ARCSINE(38),
  ARCCOSINE(39),
  ARCTANGENT(40),
  ARCCOSECANT(41),
  ARCSECANT(42),
  ARCCOTANGENT(43),
  SQRT(44),
  DIVISIBLE(45),
  CONST_RATIONAL(46),
  LT(47),
  LEQ(48),
  GT(49),
  GEQ(50),
  IS_INTEGER(51),
  TO_INTEGER(52),
  TO_REAL(53),
  PI(54),
  CONST_BITVECTOR(55),
  BITVECTOR_CONCAT(56),
  BITVECTOR_AND(57),
  BITVECTOR_OR(58),
  BITVECTOR_XOR(59),
  BITVECTOR_NOT(60),
  BITVECTOR_NAND(61),
  BITVECTOR_NOR(62),
  BITVECTOR_XNOR(63),
  BITVECTOR_COMP(64),
  BITVECTOR_MULT(65),
  BITVECTOR_PLUS(66),
  BITVECTOR_SUB(67),
  BITVECTOR_NEG(68),
  BITVECTOR_UDIV(69),
  BITVECTOR_UREM(70),
  BITVECTOR_SDIV(71),
  BITVECTOR_SREM(72),
  BITVECTOR_SMOD(73),
  BITVECTOR_SHL(74),
  BITVECTOR_LSHR(75),
  BITVECTOR_ASHR(76),
  BITVECTOR_ULT(77),
  BITVECTOR_ULE(78),
  BITVECTOR_UGT(79),
  BITVECTOR_UGE(80),
  BITVECTOR_SLT(81),
  BITVECTOR_SLE(82),
  BITVECTOR_SGT(83),
  BITVECTOR_SGE(84),
  BITVECTOR_ULTBV(85),
  BITVECTOR_SLTBV(86),
  BITVECTOR_ITE(87),
  BITVECTOR_REDOR(88),
  BITVECTOR_REDAND(89),
  BITVECTOR_EXTRACT(90),
  BITVECTOR_REPEAT(91),
  BITVECTOR_ZERO_EXTEND(92),
  BITVECTOR_SIGN_EXTEND(93),
  BITVECTOR_ROTATE_LEFT(94),
  BITVECTOR_ROTATE_RIGHT(95),
  INT_TO_BITVECTOR(96),
  BITVECTOR_TO_NAT(97),
  CONST_FLOATINGPOINT(98),
  CONST_ROUNDINGMODE(99),
  FLOATINGPOINT_FP(100),
  FLOATINGPOINT_EQ(101),
  FLOATINGPOINT_ABS(102),
  FLOATINGPOINT_NEG(103),
  FLOATINGPOINT_PLUS(104),
  FLOATINGPOINT_SUB(105),
  FLOATINGPOINT_MULT(106),
  FLOATINGPOINT_DIV(107),
  FLOATINGPOINT_FMA(108),
  FLOATINGPOINT_SQRT(109),
  FLOATINGPOINT_REM(110),
  FLOATINGPOINT_RTI(111),
  FLOATINGPOINT_MIN(112),
  FLOATINGPOINT_MAX(113),
  FLOATINGPOINT_LEQ(114),
  FLOATINGPOINT_LT(115),
  FLOATINGPOINT_GEQ(116),
  FLOATINGPOINT_GT(117),
  FLOATINGPOINT_ISN(118),
  FLOATINGPOINT_ISSN(119),
  FLOATINGPOINT_ISZ(120),
  FLOATINGPOINT_ISINF(121),
  FLOATINGPOINT_ISNAN(122),
  FLOATINGPOINT_ISNEG(123),
  FLOATINGPOINT_ISPOS(124),
  FLOATINGPOINT_TO_FP_FLOATINGPOINT(126),
  FLOATINGPOINT_TO_FP_REAL(127),
  FLOATINGPOINT_TO_FP_SIGNED_BITVECTOR(128),
  FLOATINGPOINT_TO_FP_UNSIGNED_BITVECTOR(129),
  FLOATINGPOINT_TO_FP_GENERIC(130),
  FLOATINGPOINT_TO_UBV(131),
  FLOATINGPOINT_TO_SBV(132),
  FLOATINGPOINT_TO_REAL(133),
  SELECT(134),
  STORE(135),
  STORE_ALL(136),
  EQ_RANGE(137),
  APPLY_CONSTRUCTOR(138),
  APPLY_SELECTOR(139),
  APPLY_TESTER(140),
  TUPLE_UPDATE(141),
  RECORD_UPDATE(142),
  MATCH(143),
  MATCH_CASE(144),
  MATCH_BIND_CASE(145),
  DT_SIZE(146),
  SEP_NIL(147),
  SEP_EMP(148),
  SEP_PTO(149),
  SEP_STAR(150),
  SEP_WAND(151),
  EMPTYSET(152),
  UNION(153),
  INTERSECTION(154),
  SETMINUS(155),
  SUBSET(156),
  MEMBER(157),
  SINGLETON(158),
  INSERT(159),
  CARD(160),
  COMPLEMENT(161),
  UNIVERSE_SET(162),
  JOIN(163),
  PRODUCT(164),
  TRANSPOSE(165),
  TCLOSURE(166),
  JOIN_IMAGE(167),
  IDEN(168),
  COMPREHENSION(169),
  CHOOSE(170),
  IS_SINGLETON(171),
  EMPTYBAG(172),
  UNION_MAX(173),
  UNION_DISJOINT(174),
  INTERSECTION_MIN(175),
  DIFFERENCE_SUBTRACT(176),
  DIFFERENCE_REMOVE(177),
  SUBBAG(178),
  BAG_COUNT(179),
  DUPLICATE_REMOVAL(180),
  MK_BAG(181),
  BAG_CARD(182),
  BAG_CHOOSE(183),
  BAG_IS_SINGLETON(184),
  BAG_FROM_SET(185),
  BAG_TO_SET(186),
  STRING_CONCAT(187),
  STRING_IN_REGEXP(188),
  STRING_LENGTH(189),
  STRING_SUBSTR(190),
  STRING_UPDATE(191),
  STRING_CHARAT(192),
  STRING_STRCTN(193),
  STRING_STRIDOF(194),
  STRING_STRREPL(195),
  STRING_STRREPLALL(196),
  STRING_REPLACE_RE(197),
  STRING_REPLACE_RE_ALL(198),
  STRING_TOLOWER(199),
  STRING_TOUPPER(200),
  STRING_REV(201),
  STRING_TO_CODE(202),
  STRING_FROM_CODE(203),
  STRING_LT(204),
  STRING_LEQ(205),
  STRING_PREFIX(206),
  STRING_SUFFIX(207),
  STRING_IS_DIGIT(208),
  STRING_ITOS(209),
  STRING_STOI(210),
  CONST_STRING(211),
  STRING_TO_REGEXP(212),
  REGEXP_CONCAT(213),
  REGEXP_UNION(214),
  REGEXP_INTER(215),
  REGEXP_DIFF(216),
  REGEXP_STAR(217),
  REGEXP_PLUS(218),
  REGEXP_OPT(219),
  REGEXP_RANGE(220),
  REGEXP_REPEAT(221),
  REGEXP_LOOP(222),
  REGEXP_EMPTY(223),
  REGEXP_SIGMA(224),
  REGEXP_COMPLEMENT(225),
  CONST_SEQUENCE(238),
  SEQ_UNIT(239),
  SEQ_NTH(240),
  FORALL(241),
  EXISTS(242),
  BOUND_VAR_LIST(243),
  INST_PATTERN(244),
  INST_NO_PATTERN(245),
  INST_ATTRIBUTE(246),
  INST_PATTERN_LIST(247),
  LAST_KIND(248);

  private int value;

  private Kind(int value)
  {
    this.value = value;
  }

  public int getValue()
  {
    return value;
  }
}
